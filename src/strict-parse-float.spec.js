/* eslint-env jest */

const strictParseFloat = require('./strict-parse-float')

describe('strict-parse-float', () => {
  it('does not work for non-strings', () => {
    expect(() => strictParseFloat()).toThrowError('Cannot parse a non-string')
    expect(() => strictParseFloat(undefined)).toThrowError('Cannot parse a non-string')
    expect(() => strictParseFloat(null)).toThrowError('Cannot parse a non-string')
    expect(() => strictParseFloat(false)).toThrowError('Cannot parse a non-string')
    expect(() => strictParseFloat(true)).toThrowError('Cannot parse a non-string')
    expect(() => strictParseFloat(NaN)).toThrowError('Cannot parse a non-string')
    expect(() => strictParseFloat(0)).toThrowError('Cannot parse a non-string')
    expect(() => strictParseFloat([])).toThrowError('Cannot parse a non-string')
    expect(() => strictParseFloat({})).toThrowError('Cannot parse a non-string')
    expect(() => strictParseFloat(() => {})).toThrowError('Cannot parse a non-string')
  })

  it('does not work for some strings', () => {
    expect(() => strictParseFloat('')).toThrowError('Invalid argument: ')
    expect(() => strictParseFloat('-')).toThrowError('Invalid argument:')
    expect(() => strictParseFloat('e')).toThrowError('Invalid argument: e')
    expect(() => strictParseFloat('E')).toThrowError('Invalid argument: E')
    expect(() => strictParseFloat('1E')).toThrowError('Invalid argument: 1E')
    expect(() => strictParseFloat('2+')).toThrowError('Invalid argument: 2+')
    expect(() => strictParseFloat('2e+')).toThrowError('Invalid argument: 2e+')
    expect(() => strictParseFloat('e+0')).toThrowError('Invalid argument: e+0')
    expect(() => strictParseFloat('e1')).toThrowError('Invalid argument: e1')
  })

  it('works for regular integers', () => {
    expect(strictParseFloat('0')).toBe(0)
    expect(strictParseFloat('1')).toBe(1)
    expect(strictParseFloat('-789')).toBe(-789)
    expect(strictParseFloat('93045701703')).toBe(93045701703)
    expect(strictParseFloat('9007199254740991')).toBe(9007199254740991)
    expect(strictParseFloat('9007199254740991')).toBe(Number.MAX_SAFE_INTEGER) // Same thing
  })

  it('behaves correctly with large integers', () => {
    expect(strictParseFloat('9007199254740992')).toBe(9007199254740992)
    expect(() => strictParseFloat('9007199254740993')).toThrowError()
    expect(strictParseFloat('9007199254740994')).toBe(9007199254740994)

    expect(strictParseFloat('179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368')).toBe(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368)
    expect(strictParseFloat('179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368')).toBe(Number.MAX_VALUE) // Same thing
    expect(() => strictParseFloat('179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858369')).toThrowError('Number 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858369 cannot be precisely represented as a JavaScript number; the closest we can get is 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368')

    expect(() => strictParseFloat('999e9999')).toThrowError('Number 999e9999 is too large to be precisely represented as a JavaScript number')
  })

  it('behaves correctly with decimals', () => {
    expect(strictParseFloat('0.5')).toBe(0.5)

    expect(() => strictParseFloat('0.1')).toThrowError()
    expect(strictParseFloat('0.1000000000000000055511151231257827021181583404541015625')).toBe(0.1000000000000000055511151231257827021181583404541015625)
    expect(strictParseFloat('0.1000000000000000055511151231257827021181583404541015625')).toBe(0.1) // Same thing
    expect(() => strictParseFloat('0.1000000000000000055511151231257827021181583404541015626')).toThrowError('Number 0.1000000000000000055511151231257827021181583404541015626 cannot be precisely represented as a JavaScript number; the closest we can get is 0.1000000000000000055511151231257827021181583404541015625')

    expect(() => strictParseFloat('0.2')).toThrowError()
    expect(strictParseFloat('0.200000000000000011102230246251565404236316680908203125')).toBe(0.200000000000000011102230246251565404236316680908203125)
    expect(strictParseFloat('0.200000000000000011102230246251565404236316680908203125')).toBe(0.2) // Same thing
    expect(() => strictParseFloat('0.200000000000000011102230246251536316680908203125')).toThrowError()

    expect(() => strictParseFloat('0.3')).toThrowError()
    expect(strictParseFloat('0.299999999999999988897769753748434595763683319091796875')).toBe(0.299999999999999988897769753748434595763683319091796875)
    expect(strictParseFloat('0.299999999999999988897769753748434595763683319091796875')).toBe(0.3) // Same thing
    expect(() => strictParseFloat('0.299999999999999999997769753748434595763683319091796875')).toThrowError()

    expect(() => strictParseFloat('0.30000000000000004')).toThrowError()
    expect(strictParseFloat('0.3000000000000000444089209850062616169452667236328125')).toBe(0.3000000000000000444089209850062616169452667236328125)
    expect(strictParseFloat('0.3000000000000000444089209850062616169452667236328125')).toBe(0.30000000000000004) // Same thing
    expect(() => strictParseFloat('0.3000000000000000444444444444444444444444444444444444')).toThrowError()
  })

  it('handles very small decimals', () => {
    expect(strictParseFloat('0.0000000000000002220446049250313080847263336181640625')).toBe(0.0000000000000002220446049250313080847263336181640625)
    expect(strictParseFloat('0.0000000000000002220446049250313080847263336181640625')).toBe(Number.EPSILON) // Same thing
    expect(() => strictParseFloat('0.0000000000000002220446049250313080847263336181640624')).toThrow()

    expect(strictParseFloattoBe
    expect(strictParseFloattoBe(Number.MIN_VALUE * 2) // Same thing
    expect(() => strictParseFloattoThrow()
    expect(() => strictParseFloattoThrow()

    expect(() => strictParseFloat('5e-324')).toThrowError('Number 5e-324 cannot be precisely represented as a JavaScript number; the closest we can get is 0')
    expect(strictParseFloattoBe(Number.MIN_VALUE)
  })

  it('handles negatives', () => {
    expect(strictParseFloat('-9007199254740991')).toBe(-9007199254740991) // MAX_SAFE_INTEGER
    expect(strictParseFloat('-0')).toBe(-0)
    expect(strictParseFloat('-0.1000000000000000055511151231257827021181583404541015625')).toBe(-0.1000000000000000055511151231257827021181583404541015625)
    expect(() => strictParseFloat('-0.1000000000000000055511151231257827021181583404541015626')).toThrowError('Number -0.1000000000000000055511151231257827021181583404541015626 cannot be precisely represented as a JavaScript number; the closest we can get is -0.1000000000000000055511151231257827021181583404541015625')
  })
})
